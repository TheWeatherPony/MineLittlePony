buildscript {
	repositories {
		jcenter()
		maven {
			name 'forge'
			url 'http://files.minecraftforge.net/maven'
		}
		maven {
			name = 'sponge'
			url = 'https://repo.spongepowered.org/maven'
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:' + project.forgeGradleVersion
		classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle.liteloader'
apply plugin: 'org.spongepowered.mixin'

version = project.buildVersion + '-' + project.buildType
group = project.group
description = project.name_mlp
ext.revision = project.buildRevision

minecraft {
	version = project.mcVersion
	mappings = project.mcMappings
	runDir = 'run'
	replace '@VERSION@', (project.buildVersion + '-' + project.buildType)
	replace '@MLP_NAME@', project.name_mlp
	replace '@HD_NAME@', project.name_hd
}

mixin {
	defaultObfuscationEnv notch
}

targetCompatibility = project.javaVersion
sourceCompatibility = project.javaVersion

sourceSets {
	hdskins {
		compileClasspath += main.compileClasspath
		ext.refMap = project.refCore_hd
	}
	main {
		compileClasspath += hdskins.output + hdskins.compileClasspath
		ext.refMap = project.refCore_mlp
	}
}

dependencies {
	// use the same version as httpclient
	hdskinsCompile('org.apache.httpcomponents:httpmime:4.3.2') {
		transitive = false
	}
}

processResources {
	def props = [
		name: project.name_mlp,
		version: project.version,
		mcversion: project.mcVersion,
		author: project.authors,
		revision: project.buildRevision,
		description: project.description_mlp,
		description_minelittlepony: project.description_mlp,
		description_hdskinsmod: project.description_hd,
		mixinConfigs: project.mixins.split(',')
	]
	inputs.properties props
	from(sourceSets.main.resources.srcDirs) {
		include 'litemod.json'
		expand props
	}
	// copy everything else, thats not the litemod.json
	from(sourceSets.main.resources.srcDirs) {
		exclude 'litemod.json'
	}
}

jar {
	from sourceSets.hdskins.output

	// TODO relocate. LiteLoader excludes apache libs from classloading
	from {configurations.hdskinsCompile.collect{it.isDirectory() ? it : zipTree(it)}}
}

reobf {
	srgJar {
		mappingType = 'SEARGE'
	}
}

sourceJar {
	// add hdskins sources
	from sourceSets.hdskins.allSource
}

task srgJar(type: Jar) {
	from sourceSets.main.output
	from sourceSets.hdskins.output
	
	classifier "mc$minecraft.version-srg"
	baseName "mod-${project.name_mlp.toLowerCase()}"
}

task skinZip(type: Zip, dependsOn: build) {
	from fileTree('skins')
	baseName project.skinsFile
	version project.skinsVersion
}

// Just run the zip task. Please for god's sake, do what I *(*() TELL YOU TO DO JUST THIS ONCE
build.finalizedBy(skinZip)
