buildscript {
    repositories {
        jcenter()
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:' + project.forgeGradleVersion
        classpath 'org.spongepowered:mixingradle:' + project.mixinGradleVersion
    }
}
apply plugin: 'net.minecraftforge.gradle.liteloader'
apply plugin: 'org.spongepowered.mixin'

def mlp_ver = "${project.mcVersion}.${project.buildVersion}-${project.buildType}"

version = mlp_ver
group = project.group
description = project.name_mlp

minecraft {
    version = project.mcVersion
    mappings = project.mcMappings
    runDir = 'run'
    replace '@VERSION@', mlp_ver
}

mixin {
    defaultObfuscationEnv notch
}

targetCompatibility = 1.8
sourceCompatibility = 1.8

sourceSets {
    hdskins {
        compileClasspath += main.compileClasspath
        ext.refMap = 'hdskins.mixin.refmap.json'
    }
    main {
        compileClasspath += hdskins.output
        ext.refMap = 'minelp.mixin.refmap.json'
    }
}

dependencies {
    // use the same version as httpclient
    hdskinsCompile('org.apache.httpcomponents:httpmime:4.3.2') {
        transitive = false
    }
}

processResources {
    def props = [
        version: mlp_ver,
        mcversion: project.mcVersion,
        revision: project.buildRevision,
    ]
    inputs.properties props
    from(sourceSets.main.resources.srcDirs) {
        include 'litemod.json'
        expand props
    }
    // copy everything else thats not the litemod.json
    from(sourceSets.main.resources.srcDirs) {
        exclude 'litemod.json'
    }
}

jar {
    from sourceSets.hdskins.output
}

reobf {
    srgJar {
        mappingType = 'SEARGE'
    }
}

sourceJar {
    // add hdskins sources
    from sourceSets.hdskins.allSource
}

task srgJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.hdskins.output
    
    classifier "srg"
    baseName "mod-${project.name.toLowerCase()}"
}

task skinZip(type: Zip, dependsOn: build) {
    from fileTree('skins')
    baseName project.skinsFile
    version mlp_ver
		destinationDir = file('build/libs')
}

build.finalizedBy(skinZip)
